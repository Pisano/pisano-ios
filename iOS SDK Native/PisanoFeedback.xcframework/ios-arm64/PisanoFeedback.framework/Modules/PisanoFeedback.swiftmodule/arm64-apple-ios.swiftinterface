// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name PisanoFeedback
import Foundation
import MobileCoreServices
@_exported import PisanoFeedback
import Swift
import SwiftUI
import UIKit.UIColor
import UIKit.UIImage
import UIKit
import _Concurrency
import os.log
import os
@objc @_inheritsConvenienceInitializers @objcMembers public class FeedbackCallbackHelper : ObjectiveC.NSObject {
  @objc public static func description(from: PisanoFeedback.FeedbackCallback) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public protocol CharacterStyling {
  func isEqualTo(_ other: PisanoFeedback.CharacterStyling) -> Swift.Bool
}
public enum TokenType {
  case repeatingTag
  case openTag
  case intermediateTag
  case closeTag
  case string
  case escape
  case replacement
  public static func == (a: PisanoFeedback.TokenType, b: PisanoFeedback.TokenType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Token {
  public let id: Swift.String
  public let type: PisanoFeedback.TokenType
  public let inputString: Swift.String
  public var metadataStrings: [Swift.String]
  public var group: Swift.Int {
    get
  }
  public var characterStyles: [PisanoFeedback.CharacterStyling] {
    get
  }
  public var count: Swift.Int {
    get
  }
  public var shouldSkip: Swift.Bool {
    get
  }
  public var tokenIndex: Swift.Int {
    get
  }
  public var isProcessed: Swift.Bool {
    get
  }
  public var isMetadata: Swift.Bool {
    get
  }
  public var children: [PisanoFeedback.Token]
  public var outputString: Swift.String {
    get
  }
  public init(type: PisanoFeedback.TokenType, inputString: Swift.String, characterStyles: [PisanoFeedback.CharacterStyling] = [])
}
@objc @objcMembers public class PisanoCustomer : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(name: Swift.String? = nil, email: Swift.String? = nil, phoneNumber: Swift.String? = nil, gender: Swift.String? = nil, birthYear: Swift.String? = nil, externalId: Swift.String? = nil, customerAttributes: [Swift.String : Swift.String]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol LineStyling {
  var shouldTokeniseLine: Swift.Bool { get }
  func styleIfFoundStyleAffectsPreviousLine() -> PisanoFeedback.LineStyling?
}
public struct SwiftyLine : Swift.CustomStringConvertible {
  public let line: Swift.String
  public let lineStyle: PisanoFeedback.LineStyling
  public var description: Swift.String {
    get
  }
}
extension PisanoFeedback.SwiftyLine : Swift.Equatable {
  public static func == (lhs: PisanoFeedback.SwiftyLine, rhs: PisanoFeedback.SwiftyLine) -> Swift.Bool
}
public enum Remove {
  case leading
  case trailing
  case both
  case entireLine
  case none
  public static func == (a: PisanoFeedback.Remove, b: PisanoFeedback.Remove) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChangeApplication {
  case current
  case previous
  case untilClose
  public static func == (a: PisanoFeedback.ChangeApplication, b: PisanoFeedback.ChangeApplication) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FrontMatterRule {
}
public struct LineRule {
  public init(token: Swift.String, type: PisanoFeedback.LineStyling, removeFrom: PisanoFeedback.Remove = .leading, shouldTrim: Swift.Bool = true, changeAppliesTo: PisanoFeedback.ChangeApplication = .current)
}
public class SwiftyLineProcessor {
  public var processEmptyStrings: PisanoFeedback.LineStyling?
  public var frontMatterAttributes: [Swift.String : Swift.String] {
    get
  }
  public init(rules: [PisanoFeedback.LineRule], defaultRule: PisanoFeedback.LineStyling, frontMatterRules: [PisanoFeedback.FrontMatterRule] = [])
  public func process(_ string: Swift.String) -> [PisanoFeedback.SwiftyLine]
  @objc deinit
}
@objc @objcMembers public class Pisano : ObjectiveC.NSObject {
  @objc public init(appId: Swift.String, accessKey: Swift.String, apiUrl: Swift.String)
  @objc public func show(flowId: Swift.String? = nil, customer: PisanoFeedback.PisanoCustomer? = nil, payload: [Swift.String : Swift.String]? = nil, feedbackCallback: ((PisanoFeedback.FeedbackCallback) -> Swift.Void)?)
  @objc public func track(eventUrl: Swift.String, event: Swift.String, customer: PisanoFeedback.PisanoCustomer? = nil, payload: [Swift.String : Swift.String]? = nil)
  @objc deinit
}
@objc public enum FeedbackCallback : Swift.Int {
  case unknown = -1
  case closed = 0
  case success
  case sendFeedback
  case invalidCredentials
  case invalidApiUrl
  case invalidEventUrl
  case networkError
  case multipleFeedback
  case displayOnce
  case channelQuota
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PisanoFeedback.FeedbackCallback {
  public func callbackDescription() -> Swift.String
}
public enum SpaceAllowed {
  case no
  case bothSides
  case oneSide
  case leadingSide
  case trailingSide
  public static func == (a: PisanoFeedback.SpaceAllowed, b: PisanoFeedback.SpaceAllowed) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Cancel {
  case none
  case allRemaining
  case currentSet
  public static func == (a: PisanoFeedback.Cancel, b: PisanoFeedback.Cancel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CharacterRuleTagType {
  case open
  case close
  case metadataOpen
  case metadataClose
  case repeating
  public static func == (a: PisanoFeedback.CharacterRuleTagType, b: PisanoFeedback.CharacterRuleTagType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CharacterRuleTag {
  public init(tag: Swift.String, type: PisanoFeedback.CharacterRuleTagType)
}
public struct CharacterRule : Swift.CustomStringConvertible {
  public let primaryTag: PisanoFeedback.CharacterRuleTag
  public let tags: [PisanoFeedback.CharacterRuleTag]
  public let escapeCharacters: [Swift.Character]
  public let styles: [Swift.Int : PisanoFeedback.CharacterStyling]
  public let minTags: Swift.Int
  public let maxTags: Swift.Int
  public var metadataLookup: Swift.Bool
  public var isRepeatingTag: Swift.Bool {
    get
  }
  public var definesBoundary: Swift.Bool
  public var shouldCancelRemainingRules: Swift.Bool
  public var balancedTags: Swift.Bool
  public var description: Swift.String {
    get
  }
  public func tag(for type: PisanoFeedback.CharacterRuleTagType) -> PisanoFeedback.CharacterRuleTag?
  public init(primaryTag: PisanoFeedback.CharacterRuleTag, otherTags: [PisanoFeedback.CharacterRuleTag], escapeCharacters: [Swift.Character] = ["\\"], styles: [Swift.Int : PisanoFeedback.CharacterStyling] = [:], minTags: Swift.Int = 1, maxTags: Swift.Int = 1, metadataLookup: Swift.Bool = false, definesBoundary: Swift.Bool = false, shouldCancelRemainingRules: Swift.Bool = false, balancedTags: Swift.Bool = false)
}
public enum CharacterStyle : PisanoFeedback.CharacterStyling {
  case none
  case bold
  case italic
  case code
  case link
  case image
  case referencedLink
  case referencedImage
  case strikethrough
  public func isEqualTo(_ other: PisanoFeedback.CharacterStyling) -> Swift.Bool
  public static func == (a: PisanoFeedback.CharacterStyle, b: PisanoFeedback.CharacterStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum FontStyle : Swift.Int {
  case normal
  case bold
  case italic
  case boldItalic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol FontProperties {
  @objc var fontName: Swift.String? { get set }
  @objc var color: UIKit.UIColor { get set }
  @objc var fontSize: CoreGraphics.CGFloat { get set }
  @objc var fontStyle: PisanoFeedback.FontStyle { get set }
}
@objc public protocol LineProperties {
  @objc var alignment: UIKit.NSTextAlignment { get set }
  @objc var lineSpacing: CoreGraphics.CGFloat { get set }
  @objc var paragraphSpacing: CoreGraphics.CGFloat { get set }
}
@_inheritsConvenienceInitializers @objc open class BasicStyles : ObjectiveC.NSObject, PisanoFeedback.FontProperties {
  @objc public var fontName: Swift.String?
  @objc public var color: UIKit.UIColor
  @objc public var fontSize: CoreGraphics.CGFloat
  @objc public var fontStyle: PisanoFeedback.FontStyle
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class LineStyles : ObjectiveC.NSObject, PisanoFeedback.FontProperties, PisanoFeedback.LineProperties {
  @objc public var fontName: Swift.String?
  @objc public var color: UIKit.UIColor
  @objc public var fontSize: CoreGraphics.CGFloat
  @objc public var fontStyle: PisanoFeedback.FontStyle
  @objc public var alignment: UIKit.NSTextAlignment
  @objc public var lineSpacing: CoreGraphics.CGFloat
  @objc public var paragraphSpacing: CoreGraphics.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class LinkStyles : PisanoFeedback.BasicStyles {
  public var underlineStyle: UIKit.NSUnderlineStyle
  public var underlineColor: UIKit.UIColor {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc open class SwiftyMarkdown : ObjectiveC.NSObject {
  public static var frontMatterRules: [PisanoFeedback.FrontMatterRule]
  public static var lineRules: [PisanoFeedback.LineRule]
  public static var characterRules: [PisanoFeedback.CharacterRule]
  open var h1: PisanoFeedback.LineStyles
  open var h2: PisanoFeedback.LineStyles
  open var h3: PisanoFeedback.LineStyles
  open var h4: PisanoFeedback.LineStyles
  open var h5: PisanoFeedback.LineStyles
  open var h6: PisanoFeedback.LineStyles
  open var body: PisanoFeedback.LineStyles
  open var blockquotes: PisanoFeedback.LineStyles
  open var link: PisanoFeedback.LinkStyles
  open var bold: PisanoFeedback.BasicStyles
  open var italic: PisanoFeedback.BasicStyles
  open var code: PisanoFeedback.BasicStyles
  open var strikethrough: PisanoFeedback.BasicStyles
  public var bullet: Swift.String
  public var underlineLinks: Swift.Bool
  public var frontMatterAttributes: [Swift.String : Swift.String] {
    get
  }
  public init(string: Swift.String)
  public init?(url: Foundation.URL)
  open func setFontSizeForAllStyles(with size: CoreGraphics.CGFloat)
  open func setFontColorForAllStyles(with color: UIKit.UIColor)
  open func setFontNameForAllStyles(with name: Swift.String)
  open func attributedString(from markdownString: Swift.String? = nil) -> Foundation.NSAttributedString
  @objc deinit
}
public class SwiftyTokeniser {
  public var metadataLookup: [Swift.String : Swift.String]
  public init(with rules: [PisanoFeedback.CharacterRule])
  @objc deinit
  public func process(_ inputString: Swift.String) -> [PisanoFeedback.Token]
}
extension PisanoFeedback.TokenType : Swift.Equatable {}
extension PisanoFeedback.TokenType : Swift.Hashable {}
extension PisanoFeedback.Remove : Swift.Equatable {}
extension PisanoFeedback.Remove : Swift.Hashable {}
extension PisanoFeedback.ChangeApplication : Swift.Equatable {}
extension PisanoFeedback.ChangeApplication : Swift.Hashable {}
extension PisanoFeedback.FeedbackCallback : Swift.Equatable {}
extension PisanoFeedback.FeedbackCallback : Swift.Hashable {}
extension PisanoFeedback.FeedbackCallback : Swift.RawRepresentable {}
extension PisanoFeedback.SpaceAllowed : Swift.Equatable {}
extension PisanoFeedback.SpaceAllowed : Swift.Hashable {}
extension PisanoFeedback.Cancel : Swift.Equatable {}
extension PisanoFeedback.Cancel : Swift.Hashable {}
extension PisanoFeedback.CharacterRuleTagType : Swift.Equatable {}
extension PisanoFeedback.CharacterRuleTagType : Swift.Hashable {}
extension PisanoFeedback.CharacterStyle : Swift.Equatable {}
extension PisanoFeedback.CharacterStyle : Swift.Hashable {}
extension PisanoFeedback.FontStyle : Swift.Equatable {}
extension PisanoFeedback.FontStyle : Swift.Hashable {}
extension PisanoFeedback.FontStyle : Swift.RawRepresentable {}
